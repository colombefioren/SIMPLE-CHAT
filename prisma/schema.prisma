// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  name          String?
  email         String    @unique
  username      String?   @unique
  emailVerified Boolean   @default(false)
  isOnline      Boolean?  @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  sessions Session[]
  accounts Account[]

  messages         Message[]     @relation("UserMessages") 
  groupMemberships GroupMember[]
  createdGroups    Group[]
  ChatMember       ChatMember[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Chat {
  id        String   @id @default(cuid())
  type      ChatType @default(PRIVATE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members  ChatMember[]
  messages Message[]
  group    Group?
}

enum ChatType {
  PRIVATE
  GROUP
  VIDEO
}

model ChatMember {
  id       String   @id @default(cuid())
  userId   String
  chatId   String
  joinedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  chat Chat @relation(fields: [chatId], references: [id])
}

model Group {
  id          String   @id @default(cuid())
  chatId      String   @unique
  name        String
  description String?
  imageUrl    String?
  createdBy   String
  createdAt   DateTime @default(now())

  chat    Chat          @relation(fields: [chatId], references: [id])
  creator User          @relation(fields: [createdBy], references: [id])
  members GroupMember[]
}

model GroupMember {
  id       String    @id @default(cuid())
  groupId  String
  userId   String
  role     GroupRole @default(MEMBER)
  joinedAt DateTime  @default(now())

  group Group @relation(fields: [groupId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

enum GroupRole {
  ADMIN
  MEMBER
}

model Message {
  id        String   @id @default(cuid())
  content   String?
  imageUrl  String?
  chatId    String
  senderId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat   Chat @relation(fields: [chatId], references: [id])
  sender User @relation("UserMessages", fields: [senderId], references: [id])
}




